// Generated by CoffeeScript 1.9.1
(function() {
  var events, xmlparser;

  events = require("events");

  xmlparser = require("xml2json").toJson;

  module.exports = {
    json: function(readable) {
      var actions;
      actions = new events.EventEmitter();
      readable.on("readable", function() {
        var chunk, data;
        chunk = readable.read();
        if (chunk !== null) {
          data = false;
          try {
            data = JSON.parse(chunk);
          } catch (_error) {}
          if (data) {
            return actions.emit("dataChunk", data);
          } else {
            return actions.emit("dataConsole", chunk);
          }
        }
      });
      return actions;
    },
    xunit: function(readable) {
      var actions, buffer, parse;
      actions = new events.EventEmitter();
      buffer = "";
      parse = function() {
        var data, i, item, len, rawData, ref, test;
        rawData = xmlparser(buffer, {
          object: true
        });
        data = [
          [
            "start", {
              "total": rawData.testsuite.tests
            }
          ]
        ];
        ref = rawData.testsuite.testcase;
        for (i = 0, len = ref.length; i < len; i++) {
          test = ref[i];
          item = {
            title: test.name,
            fullTitle: test.classname + " " + test.name,
            duration: test.time * 1000
          };
          if (test.failure) {
            item.failure = test.failure.replace(/&amp;lt;/g, "<").replace(/&amp;gt;/g, ">").replace(/&amp;&amp;#35;40;/g, "(").replace(/&amp;&amp;#35;41;/g, ")").replace(/&apos;/g, "'");
            item = ["fail", item];
          } else {
            item = ["pass", item];
          }
          data.push(item);
        }
        data.push([
          "end", {
            tests: rawData.testsuite.tests,
            failures: rawData.testsuite.failures,
            duration: rawData.testsuite.time * 1000
          }
        ]);
        return actions.emit("data", data);
      };
      readable.on("readable", function() {
        var chunk, match;
        chunk = readable.read();
        if (chunk !== null) {
          match = false;
          if (/^<testsuite/.test(chunk)) {
            return buffer = chunk;
          } else if (/^<testcase/.test(chunk)) {
            buffer += chunk;
            if (/<\/testsuite>/.test(chunk)) {
              return parse();
            }
          } else if (/^<\/testsuite>/.test(chunk)) {
            buffer += chunk;
            return parse();
          } else {
            return actions.emit("dataConsole", chunk);
          }
        }
      });
      return actions;
    }
  };

}).call(this);
