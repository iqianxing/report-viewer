// Generated by CoffeeScript 1.9.1
(function() {
  "use strict";
  var events, http, path, socketio, url;

  http = require("http");

  url = require("url");

  path = require("path");

  events = require("events");

  socketio = require("socket.io");

  module.exports = function(args) {
    var actions, close, currentConsole, currentData, ended, io, loaded, opener, parser, port, server, site;
    currentData = [];
    currentConsole = [];
    port = args.port || 9999;
    parser = args.parser;
    if (!args.viewer) {
      throw new Error("no viewer given");
    }
    if (!args.viewer.files) {
      throw new Error("no files to serve");
    }
    site = args.viewer;
    ended = false;
    process.stdin.on('end', function() {
      ended = true;
      if (loaded) {
        return close();
      }
    });
    server = http.createServer(function(request, response) {
      var extension, filename;
      filename = url.parse(request.url).pathname.slice(1) || "index.html";
      if (site.files[filename]) {
        extension = path.extname(filename).slice(1);
        if (extension === "js") {
          extension = "javascript";
        }
        response.writeHead(200, {
          "Content-type": "text/" + extension
        });
        response.write(site.files[filename], "utf8");
      } else {
        response.writeHead(404, {
          "Content-type": "text/plain"
        });
        response.write("404", "utf8");
      }
      return response.end();
    });
    loaded = false;
    io = socketio(server);
    io.on("connection", function(socket) {
      socket.on("data", function() {
        return socket.emit("data", currentData);
      });
      socket.on("console", function(console) {
        return socket.emit("console", currentConsole);
      });
      return socket.on("loaded", function() {
        loaded = true;
        if (ended) {
          return close();
        }
      });
    });
    if (site.action) {
      site.action.on("reload", function() {
        return io.sockets.emit("reload");
      });
    }
    process.stdin.setEncoding("utf8");
    actions = new events.EventEmitter();
    actions.on("data", function(data) {
      io.sockets.emit("data", data);
      return currentData = data;
    });
    actions.on("dataChunk", function(dataChunk) {
      io.sockets.emit("dataChunk", dataChunk);
      if (dataChunk[0] === "start") {
        currentData = [dataChunk];
        return currentConsole = [];
      } else {
        return currentData.push(dataChunk);
      }
    });
    actions.on("errorChunk", function(errorChunk) {
      var d, i, len, results;
      io.sockets.emit("errorChunk", errorChunk);
      results = [];
      for (i = 0, len = currentData.length; i < len; i++) {
        d = currentData[i];
        if (d[0] === "fail" && d[1] && d[1].failure && d[1].failure === errorChunk.id) {
          results.push(d[1].failure = errorChunk.text.join("\n"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    });
    actions.on("consoleChunk", function(consoleChunk) {
      io.sockets.emit("consoleChunk", consoleChunk);
      return currentConsole.push(consoleChunk);
    });
    parser(actions, process.stdin);
    console.log("serving on port " + port);
    server.listen(port);
    if (args.opener) {
      opener = require("opener");
      opener("http://localhost:" + port);
    } else {
      io.sockets.emit("reload");
    }
    return close = function() {
      server.close();
      return process.exit();
    };
  };

}).call(this);
