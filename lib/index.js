// Generated by CoffeeScript 1.9.1
(function() {
  "use strict";
  var express, http, inspect, path, xmlparser;

  express = require("express");

  http = require("http");

  path = require("path");

  xmlparser = require("xml2json").toJson;

  inspect = require('util').inspect;

  module.exports = function(args) {
    var app, appdir, buffer, currentData, dir, io, lrserver, opener, parser, parsers, port, reporter, server;
    port = args.port || 9999;
    currentData = [];
    buffer = "";
    parsers = {
      json: function(chunk) {
        var data;
        chunk = process.stdin.read();
        if (chunk !== null) {
          data = false;
          try {
            data = JSON.parse(chunk);
          } catch (_error) {}
          if (data) {
            if (data[0] === "start") {
              currentData = [data];
            } else {
              currentData.push(data);
            }
            return io.sockets.emit("singleData", data);
          } else {
            return console.log(chunk);
          }
        }
      },
      xunit: function(chunk) {
        var match, parse;
        parse = function() {
          var data, i, item, len, ref, test;
          data = xmlparser(buffer, {
            object: true
          });
          currentData = [
            [
              "start", {
                "total": data.testsuite.tests
              }
            ]
          ];
          ref = data.testsuite.testcase;
          for (i = 0, len = ref.length; i < len; i++) {
            test = ref[i];
            item = {
              title: test.name,
              fullTitle: test.classname + " " + test.name,
              duration: test.time * 1000
            };
            if (test.failure) {
              item.failure = test.failure.replace(/&amp;lt;/g, "<").replace(/&amp;gt;/g, ">").replace(/&amp;&amp;#35;40;/g, "(").replace(/&amp;&amp;#35;41;/g, ")").replace(/&apos;/g, "'");
              item = ["fail", item];
            } else {
              item = ["pass", item];
            }
            currentData.push(item);
          }
          currentData.push([
            "end", {
              tests: data.testsuite.tests,
              failures: data.testsuite.failures,
              duration: data.testsuite.time * 1000
            }
          ]);
          return io.sockets.emit("data", currentData);
        };
        chunk = process.stdin.read();
        if (chunk !== null) {
          match = false;
          if (/^<testsuite/.test(chunk)) {
            return buffer = chunk;
          } else if (/^<testcase/.test(chunk)) {
            buffer += chunk;
            if (/<\/testsuite>/.test(chunk)) {
              return parse();
            }
          } else if (/^<\/testsuite>/.test(chunk)) {
            buffer += chunk;
            return parse();
          } else {
            return console.log(chunk);
          }
        }
      }
    };
    reporter = args.reporter || "xunit";
    if (parsers[reporter]) {
      parser = parsers[reporter];
    } else {
      parser = parsers.xunit;
    }
    app = express();
    app.set("port", port);
    if (process.env.dirname) {
      dir = process.env.dirname;
    } else {
      dir = path.join(__dirname, "..");
    }
    appdir = path.join(dir, "ngapp");
    app.use(express["static"](appdir));
    app.use("/vendor", express["static"](path.join(dir, "vendor")));
    server = app.listen(app.get("port"), function() {
      return console.log("Express server listening on port %d in %s mode", app.get("port"), app.get("env"));
    });
    io = require("socket.io")(server);
    process.stdin.setEncoding('utf8');
    process.stdin.on('readable', parser);
    io.on("connection", function(socket) {
      console.log("socket.io client connected");
      socket.on("data", function() {
        return socket.emit("data", currentData);
      });
      return socket.on("livereload", function() {
        console.log("sending " + args.livereload);
        return socket.emit("livereload", args.livereload);
      });
    });
    process.stdin.on('end', function() {
      return server.close();
    });
    if (args.open) {
      opener = require("opener");
      opener("http://localhost:" + port);
    }
    if (args.livereload) {
      lrserver = require("live-reload");
      return lrserver({
        port: args.livereload,
        _: [appdir]
      });
    }
  };

}).call(this);
