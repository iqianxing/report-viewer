// Generated by CoffeeScript 1.12.7
(function() {
  "use strict";
  var http = require("http");

  var url = require("url");

  var path = require("path");

  var debug = require("debug");

  debug = debug("report-viewer");

  var spawn = require("child_process");

  spawn = spawn.spawn;

  var socketio = require("socket.io");

  module.exports = function(server, program) {
    debug("xargs: " + JSON.stringify(program))
    var child, close, currentConsole, dataManager, ended, loaded, restart;
    currentConsole = [];
    loaded = false;
    var io = socketio(server);
    var lastRoomId = null;
    io.on("connection", function(socket) {
      var context, project, spec;
      debug(socket.id + " socket connected");
      socket.on("getConsole", function() {
        debug(socket.id + " sending console cache");
        // return socket.emit("getConsole", currentConsole);
        var child_ns = io.of("/");
        return child_ns.to(socket.id).emit("getConsole", currentConsole);
      });
      socket.on("setConsole", function(newConsole) {
        debug(socket.id + " test ended. Updated console cache");
        return currentConsole = newConsole;
      });
      socket.on("loaded", function() {
        debug(socket.id + " Website loaded successfully");
        loaded = true;
        if (ended) {
          return close();
        }
      });
      socket.on("restartable", function() {
        debug(socket.id + " sending restartable: " + program.args.length > 0);
        // return socket.emit("restartable", program.args.length > 0);
        var child_ns = io.of("/");
        return child_ns.to(socket.id).emit("restartable", program.args.length > 0);
      });
      if (program.args.length > 0) {
        debug(socket.id + " client requests restart of child process");
        if (restart) {
          spec = socket.request._query["spec"];
          project = socket.request._query["project"];
          context = socket.request._query["context"];
          restart(spec, project, context, socket.id);
          lastRoomId = socket.id;
          return socket.on("restart", function() {
            return restart(spec, project, context, socket.id);
          });
        }
      }
    });
    ended = false;
    child = null;
    dataManager = function(chunk) {
      var cLine, i, len, line, lines, results;
      if (chunk !== null) {
        lines = chunk.split("\n");
        if (lines[lines.length - 1] === "") {
          lines.pop();
        }
        results = [];
        for (i = 0, len = lines.length; i < len; i++) {
          line = lines[i];
          cLine = {};
          cLine.id = currentConsole.length;
          cLine.text = line;
          cLine.type = "normal";
          // io.emit("consoleLine", cLine);
          var child_ns = io.of("/");
          child_ns.to(lastRoomId).emit("consoleLine", cLine);
          results.push(currentConsole.push(cLine));
        }
        return results;
      }
    };
    if (program.args.length === 0) {
      process.stdin.on('end', function(chunk) {
        debug("input closed");
        ended = true;
        if (loaded) {
          return close();
        }
      });
      process.stdin.setEncoding("utf8");
      process.stdin.on("data", dataManager);
    } else {
      restart = function(spec, project, context, roomId) {
        var args, child_env, cwd, sh;
        currentConsole = [];
        // io.emit("restart");
        var child_ns = io.of("/");
        child_ns.to(roomId).emit("restart");
        if (child) {
          child.kill();
        }
        sh = "sh";
        args = ["-c"];
        if (process.platform === "win32") {
          sh = "cmd";
          args[0] = "/c";
        }
        args = args.concat(program.args);
        if (spec) {
          args[1] = args[1] + " " + spec;
        }
        cwd = process.cwd();
        if (project) {
          cwd = project;
        }
        child_env = JSON.stringify(process.env);
        child_env = JSON.parse(child_env);
        if (context) {
          child_env.mochacontext = context;
        }
        child = spawn(sh, args, {
          cwd: cwd,
          env: child_env
        });
        child.stdout.setEncoding("utf8");
        child.stdout.on("data", dataManager);
        child.stderr.setEncoding("utf8");
        return child.stderr.on("data", dataManager);
      };
    }
    return close = function() {
      debug("exit process");
      if (child) {
        child.kill();
      }
      return process.exit();
    };
  };

}).call(this);
