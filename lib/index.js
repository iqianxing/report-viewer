// Generated by CoffeeScript 1.9.1
(function() {
  "use strict";
  var events, http, parsers, path, socketio, url;

  http = require("http");

  url = require("url");

  path = require("path");

  events = require("events");

  socketio = require("socket.io");

  parsers = require("./parsers");

  module.exports = function(args) {
    var actions, currentData, io, opener, parser, port, reporter, server, site;
    currentData = [];
    port = args.port || 9999;
    reporter = args.reporter || "xunit";
    parser = args.parser || parsers[reporter] || parsers.xunit;
    if (!args.viewer) {
      throw new Error("no viewer given");
    }
    if (!args.viewer.files) {
      throw new Error("no files to serve");
    }
    site = args.viewer;
    server = http.createServer(function(request, response) {
      var extension, filename;
      filename = url.parse(request.url).pathname.slice(1) || "index.html";
      if (site.files[filename]) {
        extension = path.extname(filename).slice(1);
        if (extension === "js") {
          extension = "javascript";
        }
        response.writeHead(200, {
          "Content-type": "text/" + extension
        });
        response.write(site.files[filename], "utf8");
      } else {
        response.writeHead(404, {
          "Content-type": "text/plain"
        });
        response.write("404", "utf8");
      }
      return response.end();
    });
    io = socketio(server);
    io.on("connection", function(socket) {
      return socket.on("data", function() {
        return socket.emit("data", currentData);
      });
    });
    if (site.action) {
      site.action.on("reload", function() {
        return io.sockets.emit("reload");
      });
    }
    process.stdin.setEncoding("utf8");
    actions = parser(process.stdin);
    actions.on("data", function(data) {
      io.sockets.emit("data", data);
      return currentData = data;
    });
    actions.on("dataChunk", function(dataChunk) {
      io.sockets.emit("dataChunk", dataChunk);
      if (dataChunk[0] === "start") {
        return currentData = [dataChunk];
      } else {
        return currentData.push(dataChunk);
      }
    });
    actions.on("dataConsole", function(dataConsole) {
      return io.sockets.emit("dataConsole", dataConsole);
    });
    process.stdin.on('end', function() {
      return server.close();
    });
    console.log("serving on port " + port);
    server.listen(port);
    if (args.open) {
      opener = require("opener");
      return opener("http://localhost:" + port);
    } else {
      return io.sockets.emit("reload");
    }
  };

}).call(this);
