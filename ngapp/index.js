// Generated by CoffeeScript 1.9.1
var angular, io, ngmaterial, reporterApp;

angular = require("angular");

require("angular-animate");

require("angular-aria");

ngmaterial = require("angular-material");

io = require("socket.io-client");

require("./index.css");

reporterApp = angular.module("reporterApp", [ngmaterial]);

reporterApp.controller("appCtrl", function($scope, $mdToast) {
  var levels, parse, reload, socket;
  socket = io();
  $scope.data = [];
  $scope.failed = [];
  levels = [];
  $scope.count = 0;
  $scope.tests = 0;
  socket.emit("livereload");
  socket.once("livereload", function(response) {
    var scripttag;
    console.log("starting livereload");
    if (response) {
      scripttag = document.createElement("script");
      scripttag.setAttribute("type", "text/javascript");
      scripttag.setAttribute("src", window.location.protocol + "//" + window.location.hostname + ":" + response);
      return document.getElementsByTagName("body")[0].appendChild(scripttag);
    }
  });
  $scope.splitNewLine = function(string) {
    return string.split("\n");
  };
  parse = function(data) {
    var count, difference, i, identifier, len, lvl, newlevels;
    if (data[0]) {
      if (data[0] === "start") {
        $scope.data = [];
        $scope.failed = [];
        count = data[0][1].total;
      } else if (data[0] === "fail") {
        $scope.failed.push(data[1]);
      } else if (data[0] === "pass") {
        $scope.data.push(data[1]);
      } else if (data[0] === "end") {
        $scope.count = $scope.data.length;
        $scope.tests = data[1].tests;
        $mdToast.show($mdToast.simple().content('Test finished'));
      }
      if (data[0] === "fail" || data[0] === "pass") {
        identifier = data[1].fullTitle.replace(data[1].title, "").replace(/\s+$/, "");
        difference = identifier;
        newlevels = [];
        for (i = 0, len = levels.length; i < len; i++) {
          lvl = levels[i];
          if (identifier.indexOf(lvl) > -1) {
            difference = difference.replace(lvl, "").replace(/^s+/, "");
            newlevels.push(lvl);
          }
        }
        if (difference) {
          newlevels.push(difference);
        }
        data[1].levels = newlevels;
        return levels = newlevels.slice();
      }
    }
  };
  reload = function() {
    $scope.data = [];
    socket.emit("data");
    return socket.on("data", function(response) {
      var data, i, len;
      if (response) {
        for (i = 0, len = response.length; i < len; i++) {
          data = response[i];
          parse(data);
        }
        return $scope.$$phase || $scope.$digest();
      }
    });
  };
  reload();
  return socket.on("data", function(data) {
    parse(data);
    return $scope.$$phase || $scope.$digest();
  });
});
